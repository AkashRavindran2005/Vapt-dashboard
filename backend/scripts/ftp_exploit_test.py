import sys
import subprocess
import time
import socket
import ftplib

def test_ftp_exploits(target, port=21):
    print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] Starting FTP exploit tests for {target}:{port}")
    
    vulnerabilities_found = []
    
    try:
        print("Testing anonymous FTP access...")
        try:
            ftp = ftplib.FTP()
            ftp.connect(target, int(port), timeout=10)
            response = ftp.login('anonymous', 'anonymous@test.com')
            
            if '230' in response:  
                vuln_info = f"FTP-ANON-VULNERABLE: {target}:{port} - Anonymous FTP access enabled"
                vulnerabilities_found.append(vuln_info)
                print(vuln_info)
                print(f"FTP-ANON-DETAILS: Anonymous login successful with response: {response}")
                print(f"FTP-ANON-IMPACT: Unauthorized file access and potential data exposure")
                print(f"FTP-ANON-RECOMMENDATION: Disable anonymous access and implement proper authentication")
                
                try:
                    file_list = ftp.nlst()
                    if file_list:
                        print(f"FTP-ANON-FILES: Found {len(file_list)} files/directories accessible")
                except:
                    pass
            
            ftp.quit()
            
        except ftplib.error_perm as e:
            if '530' in str(e):  
                print(f"FTP-ANON-SECURE: {target}:{port} - Anonymous access denied")
            else:
                print(f"FTP-ANON-ERROR: {target}:{port} - {str(e)}")
        except Exception as e:
            print(f"FTP-ANON-ERROR: {target}:{port} - Connection failed: {str(e)}")

        if subprocess.run(["which", "nmap"], capture_output=True).returncode == 0:
            print("Testing vsftpd backdoor vulnerability...")
            cmd = [
                "nmap",
                "-p", str(port),
                "--script", "ftp-vsftpd-backdoor",
                target
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if "VULNERABLE" in result.stdout and "backdoor" in result.stdout:
                vuln_info = f"FTP-BACKDOOR-VULNERABLE: {target}:{port} - vsftpd backdoor detected"
                vulnerabilities_found.append(vuln_info)
                print(vuln_info)
                print(f"FTP-BACKDOOR-DETAILS: vsftpd 2.3.4 backdoor vulnerability (CVE-2011-2523)")
                print(f"FTP-BACKDOOR-IMPACT: Remote command execution with root privileges")
                print(f"FTP-BACKDOOR-RECOMMENDATION: Immediately upgrade FTP service to latest version")
            else:
                print(f"FTP-BACKDOOR-SAFE: {target}:{port} - No vsftpd backdoor detected")

        print("Testing FTP bounce attack...")
        try:
            ftp = ftplib.FTP()
            ftp.connect(target, int(port), timeout=10)
            
            try:
                ftp.login('anonymous', 'test@test.com')
                
                try:
                    ftp.sendcmd('PORT 127,0,0,1,0,22')
                    vuln_info = f"FTP-BOUNCE-VULNERABLE: {target}:{port} - FTP bounce attack possible"
                    vulnerabilities_found.append(vuln_info)
                    print(vuln_info)
                    print(f"FTP-BOUNCE-DETAILS: Server accepts PORT commands to arbitrary hosts")
                    print(f"FTP-BOUNCE-IMPACT: Can be used to scan internal networks and bypass firewalls")
                    print(f"FTP-BOUNCE-RECOMMENDATION: Disable PORT command or restrict to safe IP ranges")
                except ftplib.error_perm:
                    print(f"FTP-BOUNCE-SAFE: {target}:{port} - FTP bounce attack prevented")
                
            except ftplib.error_perm:
                print(f"FTP-BOUNCE-SKIP: {target}:{port} - Cannot test bounce without login access")
            
            ftp.quit()
            
        except Exception as e:
            print(f"FTP-BOUNCE-ERROR: {target}:{port} - {str(e)}")

        print("Analyzing FTP service version...")
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(10)
            sock.connect((target, int(port)))
            
            banner = sock.recv(1024).decode('utf-8', errors='ignore')
            sock.close()
            
            if banner:
                print(f"FTP-BANNER: {target}:{port} - {banner.strip()}")
                
                vulnerable_versions = [
                    'vsftpd 2.3.4',
                    'ProFTPD 1.3.0',
                    'wu-ftpd 2.6.0',
                    'Pure-FTPd 1.0.21'
                ]
                
                for vuln_version in vulnerable_versions:
                    if vuln_version.lower() in banner.lower():
                        vuln_info = f"FTP-VERSION-VULNERABLE: {target}:{port} - Vulnerable FTP version detected: {vuln_version}"
                        vulnerabilities_found.append(vuln_info)
                        print(vuln_info)
                        print(f"FTP-VERSION-IMPACT: Known vulnerabilities exist for this version")
                        print(f"FTP-VERSION-RECOMMENDATION: Upgrade to latest stable version")
                        break
        
        except Exception as e:
            print(f"FTP-BANNER-ERROR: {target}:{port} - {str(e)}")

        print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] FTP exploit tests completed for {target}:{port}")
        
        if not vulnerabilities_found:
            print(f"FTP-EXPLOITS-SAFE: {target}:{port} - No FTP vulnerabilities detected")
        
        return vulnerabilities_found
        
    except Exception as e:
        print(f"FTP-EXPLOITS-ERROR: {target}:{port} - {str(e)}")
        return [f"FTP exploit testing failed: {str(e)}"]

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python3 ftp_exploit_test.py <target> <port>")
        sys.exit(1)
    
    target = sys.argv[1]
    port = sys.argv[2]
    
    test_ftp_exploits(target, port)
