import sys
import subprocess
import time
import socket
import re

def test_ssh_exploits(target, port=22):
    print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] Starting SSH exploit tests for {target}:{port}")
    
    vulnerabilities_found = []
    
    try:
        print("Analyzing SSH service version...")
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(10)
            sock.connect((target, int(port)))
            
            banner = sock.recv(1024).decode('utf-8', errors='ignore').strip()
            sock.close()
            
            if banner:
                print(f"SSH-BANNER: {target}:{port} - {banner}")
                
                version_match = re.search(r'OpenSSH[_\s](\d+\.\d+)', banner, re.IGNORECASE)
                if version_match:
                    version = version_match.group(1)
                    version_float = float(version)
                    
                    if version_float < 6.0:
                        vuln_info = f"SSH-VERSION-VULNERABLE: {target}:{port} - Outdated OpenSSH version {version}"
                        vulnerabilities_found.append(vuln_info)
                        print(vuln_info)
                        print(f"SSH-VERSION-DETAILS: OpenSSH {version} has multiple known vulnerabilities")
                        print(f"SSH-VERSION-IMPACT: Authentication bypass, information disclosure, DoS attacks")
                        print(f"SSH-VERSION-RECOMMENDATION: Upgrade to OpenSSH 8.0 or later")
                    
                    elif version_float < 7.0:
                        vuln_info = f"SSH-VERSION-MEDIUM: {target}:{port} - OpenSSH version {version} has known issues"
                        vulnerabilities_found.append(vuln_info)
                        print(vuln_info)
                        print(f"SSH-VERSION-DETAILS: Some security vulnerabilities exist in OpenSSH {version}")
                        print(f"SSH-VERSION-RECOMMENDATION: Consider upgrading to OpenSSH 8.0+")
                    
                    else:
                        print(f"SSH-VERSION-OK: {target}:{port} - OpenSSH version {version} appears current")
        
        except Exception as e:
            print(f"SSH-BANNER-ERROR: {target}:{port} - {str(e)}")

        if subprocess.run(["which", "nmap"], capture_output=True).returncode == 0:
            print("Testing SSH authentication methods...")
            cmd = [
                "nmap",
                "-p", str(port),
                "--script", "ssh-auth-methods",
                target
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.stdout:
                auth_methods = []
                if 'password' in result.stdout.lower():
                    auth_methods.append('password')
                if 'publickey' in result.stdout.lower():
                    auth_methods.append('publickey')
                if 'keyboard-interactive' in result.stdout.lower():
                    auth_methods.append('keyboard-interactive')
                
                print(f"SSH-AUTH-METHODS: {target}:{port} - Supported: {', '.join(auth_methods)}")
                
                if 'password' in auth_methods and 'publickey' not in auth_methods:
                    vuln_info = f"SSH-WEAK-AUTH: {target}:{port} - Only password authentication enabled"
                    vulnerabilities_found.append(vuln_info)
                    print(vuln_info)
                    print(f"SSH-WEAK-AUTH-DETAILS: Public key authentication not available")
                    print(f"SSH-WEAK-AUTH-IMPACT: Susceptible to brute force and dictionary attacks")
                    print(f"SSH-WEAK-AUTH-RECOMMENDATION: Enable public key authentication, disable password auth")
                
                elif auth_methods:
                    print(f"SSH-AUTH-OK: {target}:{port} - Multiple authentication methods available")

        print("Testing SSH cryptographic algorithms...")
        if subprocess.run(["which", "nmap"], capture_output=True).returncode == 0:
            cmd = [
                "nmap",
                "-p", str(port),
                "--script", "ssh2-enum-algos",
                target
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.stdout:
                weak_algorithms = [
                    'des', 'rc4', 'md5', 'sha1-96', 'md5-96',
                    'diffie-hellman-group1-sha1', 'diffie-hellman-group14-sha1'
                ]
                
                weak_found = []
                for weak_algo in weak_algorithms:
                    if weak_algo in result.stdout.lower():
                        weak_found.append(weak_algo)
                
                if weak_found:
                    vuln_info = f"SSH-WEAK-CRYPTO: {target}:{port} - Weak cryptographic algorithms detected"
                    vulnerabilities_found.append(vuln_info)
                    print(vuln_info)
                    print(f"SSH-WEAK-CRYPTO-DETAILS: Found weak algorithms: {', '.join(weak_found)}")
                    print(f"SSH-WEAK-CRYPTO-IMPACT: Susceptible to cryptographic attacks")
                    print(f"SSH-WEAK-CRYPTO-RECOMMENDATION: Disable weak algorithms in SSH configuration")
                else:
                    print(f"SSH-CRYPTO-OK: {target}:{port} - Strong cryptographic algorithms in use")

        print("Analyzing SSH host keys...")
        if subprocess.run(["which", "nmap"], capture_output=True).returncode == 0:
            cmd = [
                "nmap",
                "-p", str(port),
                "--script", "ssh-hostkey",
                target
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.stdout:
                if re.search(r'1024.*\(DSA\)', result.stdout):
                    vuln_info = f"SSH-WEAK-HOSTKEY: {target}:{port} - Weak 1024-bit DSA host key detected"
                    vulnerabilities_found.append(vuln_info)
                    print(vuln_info)
                    print(f"SSH-WEAK-HOSTKEY-DETAILS: 1024-bit DSA keys are considered weak")
                    print(f"SSH-WEAK-HOSTKEY-IMPACT: Host key may be compromised through cryptographic attacks")
                    print(f"SSH-WEAK-HOSTKEY-RECOMMENDATION: Generate new 2048-bit RSA or Ed25519 host keys")
                
                rsa_match = re.search(r'(\d+).*\(RSA\)', result.stdout)
                if rsa_match:
                    key_size = int(rsa_match.group(1))
                    if key_size < 2048:
                        vuln_info = f"SSH-WEAK-RSA: {target}:{port} - Weak {key_size}-bit RSA host key"
                        vulnerabilities_found.append(vuln_info)
                        print(vuln_info)
                        print(f"SSH-WEAK-RSA-RECOMMENDATION: Use 2048-bit or larger RSA keys")

        print("Testing SSH user enumeration resistance...")
        try:
            cmd = [
                "ssh",
                "-o", "ConnectTimeout=5",
                "-o", "PreferredAuthentications=password",
                "-o", "PubkeyAuthentication=no",
                f"nonexistentuser12345@{target}",
                "-p", str(port),
                "exit"
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=10, input="\n")
            
            if "Invalid user" in result.stderr or "Unknown user" in result.stderr:
                vuln_info = f"SSH-USER-ENUM: {target}:{port} - SSH may be vulnerable to user enumeration"
                vulnerabilities_found.append(vuln_info)
                print(vuln_info)
                print(f"SSH-USER-ENUM-DETAILS: Server reveals whether usernames exist")
                print(f"SSH-USER-ENUM-IMPACT: Attackers can enumerate valid usernames")
                print(f"SSH-USER-ENUM-RECOMMENDATION: Configure SSH to not reveal user existence")
            else:
                print(f"SSH-USER-ENUM-OK: {target}:{port} - User enumeration appears to be mitigated")
        
        except Exception as e:
            print(f"SSH-USER-ENUM-ERROR: {target}:{port} - {str(e)}")

        print("Checking for known SSH vulnerabilities...")
        known_vulns = [
            {
                'name': 'CVE-2016-0777',
                'description': 'SSH client information leak',
                'versions': ['5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1']
            },
            {
                'name': 'CVE-2015-5600',
                'description': 'MaxAuthTries bypass',
                'versions': ['6.8', '6.9']
            }
        ]
        
        if any('VERSION-VULNERABLE' in vuln for vuln in vulnerabilities_found):
            print(f"SSH-CVE-CHECK: {target}:{port} - Version-specific vulnerabilities may apply")

        print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] SSH exploit tests completed for {target}:{port}")
        
        if not vulnerabilities_found:
            print(f"SSH-EXPLOITS-SAFE: {target}:{port} - No SSH vulnerabilities detected")
        
        return vulnerabilities_found
        
    except Exception as e:
        print(f"SSH-EXPLOITS-ERROR: {target}:{port} - {str(e)}")
        return [f"SSH exploit testing failed: {str(e)}"]

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python3 ssh_exploit_test.py <target> <port>")
        sys.exit(1)
    
    target = sys.argv[1]
    port = sys.argv[2]
    
    test_ssh_exploits(target, port)
